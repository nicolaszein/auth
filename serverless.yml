service: auth
frameworkVersion: '2'

custom:
  stage: ${opt:stage, self:provider.stage}
  pythonRequirements:
    slim: true
    strip: false
    layer: true
    dockerizePip: non-linux

provider:
  name: aws
  stage: dev
  runtime: python3.8
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
          Resource:
            - Fn::GetAtt:
                - UserQueue
                - Arn
            - Fn::GetAtt:
                - ActivationQueue
                - Arn
  environment:
    ENVIRONMENT: ${self:custom.stage}
    DATABASE_URL: ${ssm:/auth/${self:custom.stage}/DATABASE_URL~true}
    SENDGRID_API_KEY: ${ssm:/auth/${self:custom.stage}/SENDGRID_API_KEY~true}
  apiGateway:
    shouldStartNameWithService: true

package:
  exclude:
    - .cache/**
    - .git/**
    - .github/**
    - .pytest_cache/**
    - .DS_Store
    - node_modules/**
    - Makefile
    - package-lock.json
    - README.md
    - LICENSE
    - .gitignore
    - tests/**
    - pytest.ini

functions:
  sign-up:
    handler: auth/view/function/sign_up.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: /sign-up
          method: post
  sign-in:
    handler: auth/view/function/sign_in.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: /sign-in
          method: post
  refresh-session:
    handler: auth/view/function/refresh_session.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: /refresh-token
          method: post
  activate:
    handler: auth/view/function/activate.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: /users/activate
          method: post
  create-activation:
    handler: auth/view/function/create_activation.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UserQueue
              - Arn
  send-activation-email:
    handler: auth/view/function/send_activation_email.handle
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ActivationQueue
              - Arn

plugins:
  - serverless-offline
  - serverless-python-requirements

resources:
  Resources:
    UserQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "auth-${self:custom.stage}-user"
    ActivationQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "auth-${self:custom.stage}-activation"
